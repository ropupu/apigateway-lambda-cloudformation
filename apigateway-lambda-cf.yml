AWSTemplateFormatVersion: 2010-09-09
Resources:
    # API Gateway RestAPI
    ApiGatewayRestApi:
        Type: "AWS::ApiGateway::RestApi"
        Properties:
            Name: "HelloWorldApi"
            Description: "hello world api"
    # API Gateway Deployment
    # it depends on API Gateway Method
    ApiGatewayDeployment:
        Type: "AWS::ApiGateway::Deployment"
        DependsOn: ApiGatewayMethod
        Properties:
            RestApiId:
                Ref: ApiGatewayRestApi
            Description: "apigateway deployment"
    # API Gateway Stage
    # it depends on API Gateway Deployment
    ApiGatewayStage:
        Type: "AWS::ApiGateway::Stage"
        Properties:
            StageName: "dev"
            Description: "dev stage"
            RestApiId:
                Ref: ApiGatewayRestApi
            Variables:
                foo: "bar"
            DeploymentId:
                Ref: ApiGatewayDeployment
    # API Gateway Model
    ApiGatewayModel:
        Type: "AWS::ApiGateway::Model"
        Properties:
            RestApiId:
                Ref: ApiGatewayRestApi
            ContentType: "application/json"
            Description: "Schema for Hello World"
            Name: HelloWorldSchema
            Schema:
                "$schema": "http://json-schema.org/draft-04/schema#"
                title: PetsModelNoFlatten
                type: object
                properties:
                    status:
                        type: string
                    message:
                        type: string
    # API Gateway Resource
    ApiGatewayResource:
        Type: "AWS::ApiGateway::Resource"
        Properties:
            RestApiId:
                Ref: ApiGatewayRestApi
            ParentId:
                Fn::GetAtt:
                    - ApiGatewayRestApi
                    - RootResourceId
            PathPart: "hello"
    # API Gateway Method
    ApiGatewayMethod:
        Type: "AWS::ApiGateway::Method"
        Properties:
            RestApiId:
                Ref: ApiGatewayRestApi
            ResourceId:
                Ref: ApiGatewayResource
            HttpMethod: "GET"
            AuthorizationType: "NONE"
            Integration:
                Type: "AWS"
                Uri:
                    Fn::Join:
                        - ""
                        - - "arn:aws:apigateway"
                          - ":"
                          - Ref: AWS::Region
                          - ":"
                          - "lambda:path/2015-03-31/functions/"
                          - Fn::GetAtt:
                              - LambdaFunction
                              - Arn
                          - "/invocations"
                IntegrationHttpMethod: "POST"
                IntegrationResponses:
                    -
                        StatusCode: 200
                PassthroughBehavior: WHEN_NO_MATCH
            MethodResponses:
                -
                    StatusCode: 200
                    ResponseModels:
                        application/json: Empty
    # API Gateway UsagePlan
    ApiGatewayUsagePlan:
        Type: AWS::ApiGateway::UsagePlan
        Properties:
            ApiStages:
                -
                    ApiId:
                        Ref: ApiGatewayRestApi
                    Stage:
                        Ref: ApiGatewayStage
            Quota:
                Limit: 100
                Period: DAY
            Throttle:
                BurstLimit: 10
                RateLimit: 2
            Description: "hello world api usage plan"
            UsagePlanName: "HelloWorldUsagePlan"
    # Lambda Function
    LambdaFunction:
        Type: "AWS::Lambda::Function"
        Properties:
            FunctionName: "HelloWorld"
            Handler: "index.handler"
            MemorySize: 128
            Runtime: "nodejs6.10"
            Code:
                ZipFile:
                    "exports.handler = function(event, context, callback){ callback(null, \"Hello World\"); };"
            Role:
                Fn::GetAtt:
                    - "IAMRole"
                    - "Arn"
            Timeout: "10"
    # Lambda Permission
    LambdaPermission:
        Type: "AWS::Lambda::Permission"
        Properties:
            Action: "lambda:invokeFunction"
            FunctionName:
                 Fn::GetAtt:
                    - "LambdaFunction"
                    - "Arn"
            Principal: "apigateway.amazonaws.com"
            SourceArn:
                Fn::Join:
                    - ""
                    - - "arn:aws:execute-api"
                      - ":"
                      - Ref: AWS::Region
                      - ":"
                      - Ref: AWS::AccountId
                      - ":"
                      - Ref: ApiGatewayRestApi
                      - "/*/*/*"
    # IAM Role
    IAMRole:
        Type: "AWS::IAM::Role"
        Properties:
            AssumeRolePolicyDocument:
                Version: "2012-10-17"
                Statement:
                    -
                        Effect: Allow
                        Principal:
                            Service:
                                - "edgelambda.amazonaws.com"
                                - "lambda.amazonaws.com"
                        Action:
                            - "sts:AssumeRole"
            RoleName: "HelloWorldLambdaRole"
